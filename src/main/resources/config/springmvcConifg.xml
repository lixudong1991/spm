<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <context:component-scan base-package="cn.lxd"></context:component-scan>

    <!--bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"></bean> 非注解处理映射器-->
    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"><!--非注解处理映射器-->
        <property name="mappings">
            <props>
                <prop key="students.action">students</prop>
                <prop key="all.action">students1</prop>
            </props>
        </property>
    </bean>


    <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean> <!--非注解处理适配器,ctr必须实现HttpRequestHandler接口-->

    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean><!--非注解处理适配器，ctr必须实现org.springframework.web.servlet.mvc.Controller接口-->

    <!--可以使用<mvc:annotation-driven></mvc:annotation-driven>代替下面的注解处理映射器和注解处理适配器，默认加载很多参数绑定方法，例如json转换解析器
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean>
    可以配置conversion自定义参数绑定，validator校验器
    -->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven>

    <!--自定义参数绑定-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器-->
        <property name="converters">
            <set>
                <!--自定义日期参数绑定器-->
                <bean class="cn.lxd.ctr.converter.DateCv"></bean>
            </set>
        </property>

    </bean>


    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean><!--视图解析器-->

    <!--校验器-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!--hibernate校验器-->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"></property>
       <!--指定校验使用的资源文件，如果不指定册默认使用classpath下的Validation-Messages.properties-->
        <property name="validationMessageSource" ref="messagesource"></property>
    </bean>
    <!--校验错误信息配置文件-->
    <bean id="messagesource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">

        <!--资源文件编码格式-->
        <property name="fileEncodings" value="UTF-8"></property>
        <!--对资源文件内容缓存时间，单位秒-->
        <property name="cacheMillis" value="120"></property>

        <!--资源文件名-->
        <property name="basenames">
            <list>
                <value>classpath:vali/valimess</value>
            </list>
        </property>
    </bean>

    <mvc:interceptors>
        <!--可以配置多个拦截器，顺序执行，拦截器应该按照严格程度先后配置，越严格的越在最后-->
        <!--登录认证拦截器-->
        <mvc:interceptor>
            <!-- path=/** 表示拦截所有URL路径-->
            <mvc:mapping path="/**"/>
            <bean class="cn.lxd.intercept.LoginItcp"></bean>
        </mvc:interceptor>
       <!-- <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean></bean>
        </mvc:interceptor>-->
    </mvc:interceptors>

    <!--<mvc:resources mapping="/jsp/" location="/jsp/**"></mvc:resources>-->
</beans>